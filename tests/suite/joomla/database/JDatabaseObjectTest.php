<?php
/**
 * @package     Joomla.UnitTest
 * @subpackage  Database
 *
 * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE
 */

require_once JPATH_PLATFORM . '/joomla/database/object.php';
require_once __DIR__ . '/stubs/JDatabaseObjectInspector.php';

/**
 * Joomla Platform Database Object Test Class
 *
 * @package     Joomla.UnitTest
 * @subpackage  Database
 * @since       12.1
 */
class JDatabaseObjectTest extends JoomlaDatabaseTestCase
{
	/**
	 * Gets the data set to be loaded into the database during setup
	 *
	 * @return  xml dataset
	 *
	 * @since   11.1
	 */
	protected function getDataSet()
	{
		return $this->createXMLDataSet(dirname(__FILE__).'/stubs/object.xml');
	}

	/**
	 * Setup for testing.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	protected function setUp()
	{
		parent::setup();

		// Get the inspector object.
		$this->inspector = new JDatabaseObjectInspector;
	}

	/**
	 * Method to test that using magic __get recursively will generate a notice.
	 *
	 * Note: Magic __get does not allow recursive calls. This can be tricky
	 * because the error generated by recursing into __get is "Undefined
	 * property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant
	 * for this class because requesting a non-visible property can trigger
	 * a call to a getter for that property. If the getter references the
	 * property directly in the object, it will cause a recursion into __get.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 *
	 * @expectedException  PHPUnit_Framework_Error_Notice
	 */
	public function testRecursionInMagicGetGeneratesNotice()
	{
		$this->inspector->bind(array('recursion_error' => false));
		$null = $this->inspector->recursion_error;
	}

	/**
	 * Method to test that the database object constructor does not initialize
	 * the database table metadata. We do not need the database table metadata
	 * until we are going to store an object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testConstructorDoesNotInitializeTables()
	{
		// Create a reflection property for JDatabaseObject::initialized and make it public.
		$initializedProperty = new ReflectionProperty('JDatabaseObject', 'initialized');
		$initializedProperty->setAccessible(true);

		$this->assertFalse($initializedProperty->getValue($this->inspector));
	}

	/**
	 * Method to test that an array can be bound to the database object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testCanBindArray()
	{
		$properties = array(
			'property_1' => 'value_1',
			'property_2' => '1',
			'property_3' => 1,
			'property_4' => false,
			'property_5' => array('foo')
		);

		// Bind an array to the object.
		$this->inspector->bind($properties);

		// Assert that the values match.
		foreach ($properties as $property => $value)
		{
			$this->assertEquals($value, $this->inspector->$property);
		}
	}

	/**
	 * Method to test that an object can be bound to the database object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testCanBindObject()
	{
		$properties = new stdClass;
		$properties->property_1 = 'value_1';
		$properties->property_2 = '1';
		$properties->property_3 = 1;
		$properties->property_4 = false;
		$properties->property_5 = array('foo');

		// Bind an object to the object.
		$this->inspector->bind($properties);

		// Assert that the values match.
		foreach ($properties as $property => $value)
		{
			$this->assertEquals($value, $this->inspector->$property);
		}
	}

	/**
	 * Method to test that a string cannot be bound to the database object.
	 *
	 * @return  void
	 *
	 * @expectedException InvalidArgumentException
	 * @since   12.1
	 */
	public function testCannotBindString()
	{
		$this->inspector->bind('foobar');
	}

	/**
	 * Method to test that a value can be retrieved from the database object.
	 *
	 * @return  void
	 *
	 * @expectedException ReflectionException
	 * @since   12.1
	 */
	public function testCanGetProperty()
	{
		$this->inspector->bind(array('get_test' => 'get_test_value'));
		$this->assertEquals('get_test_value', $this->inspector->get_test);

		// Check that the property is not in the object directly.
		$refObject = new ReflectionObject($this->inspector);

		// Get the reflection property. This should throw an exception
		$property = $refObject->getProperty('get_test');
	}

	/**
	 * Method to test that a value can be set in the database object.
	 *
	 * @return  void
	 *
	 * @expectedException ReflectionException
	 * @since   12.1
	 */
	public function testCanSetProperty()
	{
		// Set the property and assert that it is the expected value.
		$this->inspector->set_test = 'set_test_value';
		$this->assertEquals('set_test_value', $this->inspector->set_test);

		// Check that the property is not in the object directly.
		$refObject = new ReflectionObject($this->inspector);

		// Get the reflection property. This should throw an exception
		$property = $refObject->getProperty('set_test');
	}

	/**
	 * Method to test that a value can be set in the database object using a
	 * setter method.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testCanSetPropertyWithSetter()
	{
		// Set the property and assert that it is the expected value.
		$this->inspector->test_value = 'one';
		$this->assertEquals('ONE', $this->inspector->test_value);

		$this->inspector->bind(array('test_value' => 'two'));
		$this->assertEquals('TWO', $this->inspector->test_value);
	}

	/**
	 * Method to test that getting an undefined property returns null.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testGetUndefinedPropertyReturnsNull()
	{
		$this->assertNull($this->inspector->foobar);
	}

	/**
	 * Method to test that an empty database object can be dumped to an empty object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testDumpEmptyObject()
	{
		$dump = $this->inspector->dump();
		$this->assertEquals('object', gettype($dump));
		$this->assertEmpty(get_object_vars($dump));
	}

	/**
	 * Method to test that a database object can be dumped to a generic object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testDumpObject()
	{
		$properties = array(
			'property_1' => 'value_1',
			'property_2' => '1',
			'property_3' => 1,
			'property_4' => false,
			'property_5' => array('foo')
		);

		// Bind an array to the object.
		$this->inspector->bind($properties);

		// Dump the object.
		$dump = $this->inspector->dump();

		$this->assertEquals($properties, (array)$dump);
		$this->assertEquals((object)$properties, $dump);
	}

	/**
	 * Method to test that the database tables can be initialized correctly via
	 * JDatabaseObject::initializeTables.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testInitializeTables()
	{
		// Create a reflection property for JDatabaseObject::tables and make it public.
		$tablesProperty = new ReflectionProperty('JDatabaseObject', 'tables');
		$tablesProperty->setAccessible(true);

		// Create a reflection property for JDatabaseObject::tables and make it public.
		$columnsProperty = new ReflectionProperty('JDatabaseObject', 'columns');
		$columnsProperty->setAccessible(true);

		// Create a reflection method for JDatabaseObject::initializeTables() and make it public.
		$initializeTablesMethod = new ReflectionMethod('JDatabaseObject', 'initializeTables');
		$initializeTablesMethod->setAccessible(true);

		// Set the tables property to be three tables without specific keys.
		$tablesProperty->setValue(
			$this->inspector,
			array('primary' => 'jos_content', 'hits' => 'jos_content_hits', 'likes' => 'jos_content_likes')
		);

		// Initialize the tables.
		$initializeTablesMethod->invoke($this->inspector);

		// Get the tables and columns.
		$tables = $tablesProperty->getValue($this->inspector);
		$columns = $columnsProperty->getValue($this->inspector);

		// Assert that the number of tables match.
		$this->assertEquals(count($tables), count($columns));

		// Assert that the title column is mapped to jos_content.
		$this->assertArrayHasKey('title', $columns['primary']);

		// Assert that the hit_modified_date column is mapped to jos_content_hits
		$this->assertArrayHasKey('hit_modified_date', $columns['hits']);

		// Assert that the like_modified_date column is mapped to jos_content_likes
		$this->assertArrayHasKey('like_modified_date', $columns['likes']);
	}

	/**
	 * Method to test that JDatabaseObject::dumpTable() only returns values
	 * for columns actually in the database table.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testDumpTable()
	{
		// Create a reflection property for JDatabaseObject::tables and make it public.
		$tablesProperty = new ReflectionProperty('JDatabaseObject', 'tables');
		$tablesProperty->setAccessible(true);

		// Create a reflection property for JDatabaseObject::tables and make it public.
		$columnsProperty = new ReflectionProperty('JDatabaseObject', 'columns');
		$columnsProperty->setAccessible(true);

		// Create a reflection method for JDatabaseObject::dumpTable() and make it public.
		$dumpTableMethod = new ReflectionMethod('JDatabaseObject', 'dumpTable');
		$dumpTableMethod->setAccessible(true);

		// Set the tables property to be three tables without specific keys.
		$tablesProperty->setValue(
			$this->inspector,
			array('primary' => 'jos_content', 'hits' => 'jos_content_hits', 'likes' => 'jos_content_likes')
		);

		// Create some test data to bind.
		$data = array(
			'content_id'			=> 1,
			'title'					=> 'Test Title',
			'hits'					=> 50,
			'like_state'			=> 1
		);

		// Bind the test data.
		$this->inspector->bind($data);

		// Dump the values for the tables.
		$baseValues		= $dumpTableMethod->invoke($this->inspector, 'primary');
		$hitsValues		= $dumpTableMethod->invoke($this->inspector, 'hits');
		$likesValues	= $dumpTableMethod->invoke($this->inspector, 'likes');

		// Assert that the data was dumped correctly for jos_content.
		$this->assertObjectHasAttribute('content_id', $baseValues);
		$this->assertObjectHasAttribute('title', $baseValues);
		$this->assertObjectNotHasAttribute('hits', $baseValues);
		$this->assertObjectNotHasAttribute('like_state', $baseValues);

		// Assert that the data was dumped correctly for jos_content_hits.
		$this->assertObjectHasAttribute('content_id', $hitsValues);
		$this->assertObjectHasAttribute('hits', $hitsValues);
		$this->assertObjectNotHasAttribute('title', $hitsValues);
		$this->assertObjectNotHasAttribute('like_state', $hitsValues);

		// Assert that the data was dumped correctly for jos_content.
		$this->assertObjectHasAttribute('content_id', $likesValues);
		$this->assertObjectHasAttribute('like_state', $likesValues);
		$this->assertObjectNotHasAttribute('title', $likesValues);
		$this->assertObjectNotHasAttribute('hits', $likesValues);
	}

	/**
	 * Method to test that JDatabaseObject::dumpTable() only returns values
	 * for columns actually in the database table when not using table names.
	 *
	 * @return  void
	 *
	 * @expectedException  InvalidArgumentException
	 * @since   12.1
	 */
	public function testDumpTableThrowsExceptionWhenTableDoesNotExist()
	{
		// Create a reflection property for JDatabaseObject::tables and make it public.
		$tablesProperty = new ReflectionProperty('JDatabaseObject', 'tables');
		$tablesProperty->setAccessible(true);

		// Create a reflection method for JDatabaseObject::dumpTable() and make it public.
		$dumpTableMethod = new ReflectionMethod('JDatabaseObject', 'dumpTable');
		$dumpTableMethod->setAccessible(true);

		// Set the tables property to be three tables without specific keys.
		$tablesProperty->setValue(
			$this->inspector,
			array('jos_content', 'jos_content_hits', 'jos_content_likes')
		);

		// Attempt to dump the values for void table. Should generate an exception.
		$dumpTableMethod->invoke($this->inspector, 'VOID');
	}

	/**
	 * Method to test that JDatabaseObject::__isset() works correctly.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testIsset()
	{
		$this->assertFalse(isset($this->inspector->title));
		$this->inspector->bind(array('title' => true));
		$this->assertTrue(isset($this->inspector->title));
	}

	/**
	 * Method to test that JDatabaseObject::__unset() works correctly.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testUnset()
	{
		$this->inspector->bind(array('title' => true));
		$this->assertTrue(isset($this->inspector->title));
		unset($this->inspector->title);
		$this->assertFalse(isset($this->inspector->title));
	}

	/**
	 * Method to test that the magic JDatabaseObject::__toString() on an
	 * empty object returns an empty JavaScript object.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testToStringEmptyObject()
	{
		$this->assertEquals('{}', (string)$this->inspector);
	}

	/**
	 * Method to test that the magic JDatabaseObject::__toString() on a simple
	 * object returns the expected values.
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testToStringSimpleObject()
	{
		$this->inspector->bind(array('title' => 'Simple Object'));
		$this->assertEquals('{"title":"Simple Object"}', (string)$this->inspector);
	}

	/**
	 * Method to test that an object can be deleted using JDatabaseObject::delete().
	 *
	 * @return  void
	 *
	 * @expectedException  RuntimeException
	 * @since   12.1
	 */
	public function testDeleteObject()
	{
		// Load the object to delete.
		$this->inspector->load(1);

		// Delete the object.
		$this->inspector->delete();

		// Try to load the object again, this should generate an exception.
		$this->inspector->load(1);
	}

	/**
	 * Method to test that an object can be loaded using JDatabaseObject::load().
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testLoadObject()
	{
		$this->inspector->load(1);
		$this->assertEquals('Test Object 1', $this->inspector->title);
	}

	/**
	 * Method to test that loading an object that does not exist using
	 * JDatabaseObject::load() will generate a LogicException.
	 *
	 * @return  void
	 *
	 * @expectedException  RuntimeException
	 * @since   12.1
	 */
	public function testLoadMissingObjectGeneratesException()
	{
		$this->inspector->load(99999999);
	}

	/**
	 * Method to test creating an object using JDatabaseObject::create().
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testCreateObject()
	{
		// Setup data for the test.
		$data = array('type_id' => 1, 'title' => 'Test Object 2');

		// Bind the data to the object.
		$this->inspector->bind($data);

		// Create the object.
		$this->inspector->create();

		// Check that the content id was set.
		$this->assertNotEmpty($this->inspector->content_id);
	}

	/**
	 * Method to test updating an object using JDatabaseObject::update().
	 *
	 * @return  void
	 *
	 * @since   12.1
	 */
	public function testUpdateObject()
	{
		// Load the object to update.
		$this->inspector->load(1);

		// Assert that the title is 'Test Object 1'.
		$this->assertEquals('Test Object 1', $this->inspector->title);

		// Setup data for the test.
		$data = array('title' => 'Test Object 2');

		// Bind the data to the object.
		$this->inspector->bind($data);

		// Update the object.
		$this->inspector->update();

		// Load the object again.
		$this->inspector->load(1);

		// Assert that the title is 'Test Object 2'.
		$this->assertEquals('Test Object 2', $this->inspector->title);
	}
}